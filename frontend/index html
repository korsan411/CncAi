<!doctype html>

<html lang="ar" dir="rtl">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width,initial-scale=1"/>
    <title>CNC AI — Multi Machine Raster Engraving (Enhanced)</title><!-- مكتبات -->
<script src="https://docs.opencv.org/4.8.0/opencv.js" async></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js"></script>

<style>
    /* الأساسيات */
    * { box-sizing: border-box; }
    :root{
        --bg: #041022; --panel:#0b1320; --muted:#9bb0c8; --accent:#06b6d4; --card-border:#1e293b; --text:#e6eef6;
    }
    body.light{ --bg:#f4f7fb; --panel:#fff; --muted:#5b6b78; --accent:#0ea5e9; --card-border:#e6eef2; --text:#042233; }
    body{ margin:0; font-family: Arial, Segoe UI, system-ui; background:var(--bg); color:var(--text); line-height:1.5; }
    .app{ max-width:1400px; margin:16px auto; padding:14px; }
    header{ display:flex; justify-content:space-between; align-items:center; margin-bottom:12px; padding-bottom:12px; border-bottom:1px solid var(--card-border); }
    .grid{ display:grid; grid-template-columns:1fr 480px; gap:16px; }
    @media (max-width:1000px){ .grid{ grid-template-columns:1fr; } }
    .panel{ background:var(--panel); padding:16px; border-radius:10px; border:1px solid var(--card-border); }
    .panel-section{ margin-bottom:20px; padding-bottom:15px; border-bottom:1px solid var(--card-border); }
    .tabs{ display:flex; margin-top:12px; border-bottom:1px solid var(--card-border); }
    .tabs button{ margin-left:6px; padding:8px 14px; border:none; border-radius:6px 6px 0 0; cursor:pointer; background:transparent; color:var(--muted); transition:all .2s; font-size:.9rem; }
    .tabs button:hover{ background:#1e293b; }
    .tabs button.active{ background:var(--accent); color:#021; }
    .tab-content{ display:none; margin-top:12px; }
    .tab-content.active{ display:block; }
    canvas{ max-width:100%; border-radius:6px; background:#000; display:block; margin:0 auto; border:1px solid #334155; }
    textarea{ width:100%; height:200px; background: #021024; color:#cfeaf2; font-family:monospace; border-radius:8px; padding:10px; border:1px solid var(--card-border); resize:vertical; }
    #threeContainer{ width:100%; height:400px; background:#081224; border-radius:8px; overflow:hidden; position:relative; }
    .simulation-controls{ position:absolute; top:10px; left:10px; z-index:100; display:flex; gap:8px; }
    .simulation-controls button{ background:rgba(0,0,0,0.7); color:white; border:1px solid var(--accent); border-radius:4px; padding:6px 12px; cursor:pointer; font-size:.8rem; }
    .simulation-controls button:hover{ background:rgba(6,182,212,0.3); }
    .simulation-info{ position:absolute; bottom:10px; left:10px; background:rgba(0,0,0,0.6); color:white; padding:8px 12px; border-radius:4px; font-size:.8rem; }
    label{ display:block; margin-top:12px; color:var(--text); font-weight:bold; font-size:.9rem; }
    .input-group{ display:grid; grid-template-columns:1fr 1fr; gap:10px; }
    input, select{ width:100%; padding:8px 10px; border-radius:6px; border:1px solid var(--card-border); background:#0f172a; color:var(--text); margin-top:6px; font-size:.9rem; }
    input:focus, select:focus{ outline:none; border-color:var(--accent); }
    .button-group{ display:flex; flex-direction:column; gap:8px; margin-top:16px; }
    button{ background:#1e293b; color:var(--text); border:none; padding:10px; border-radius:8px; cursor:pointer; transition:background .2s; font-size:.9rem; }
    button:hover{ background:#334155; }
    button.primary{ background:var(--accent); color:#021; font-weight:bold; }
    button.primary:hover{ background:#0ea5e9; }
    #toast{ position:fixed; left:16px; bottom:16px; background:rgba(0,0,0,0.85); color:#fff; padding:10px 14px; border-radius:8px; display:none; z-index:10000; box-shadow:0 4px 12px rgba(0,0,0,0.3); }
    h1{ margin:0; color:var(--accent); font-size:1.5rem; }
    h3{ margin-top:0; color:var(--muted); font-size:1.1rem; padding-bottom:8px; border-bottom:1px solid var(--card-border); }
    #cvState{ color:var(--muted); font-size:0.9em; padding:6px 10px; background:#0f172a; border-radius:6px; }
    #estTime{ margin-top:12px; color:var(--muted); text-align:center; padding:8px; background:#0f172a; border-radius:6px; }
    .file-input-container{ position:relative; overflow:hidden; display:inline-block; width:100%; }
    .file-input-container input[type=file]{ position:absolute; left:0; top:0; opacity:0; width:100%; height:100%; cursor:pointer; }
    .file-input-label{ display:block; padding:10px; background:#1e293b; color:var(--text); text-align:center; border-radius:6px; cursor:pointer; transition:background .2s; border:2px dashed #334155; }
    .file-input-label:hover{ background:#334155; }
    .info-text{ font-size:0.8rem; color:var(--muted); margin-top:4px; }
    .settings-row{ display:flex; gap:10px; align-items:end; }
    .material-preset{ background:#1e293b; border:1px solid #334155; border-radius:6px; padding:8px; margin-top:8px; cursor:pointer; transition:all .2s; }
    .material-preset:hover{ background:#334155; }
    .material-preset.active{ background:var(--accent); color:#021; border-color:var(--accent); }
    .material-name{ font-weight:bold; margin-bottom:4px; }
    .material-details{ font-size:0.8rem; color:var(--muted); }
    .dimension-info{ font-size:0.8rem; color:var(--accent); margin-top:4px; }
    .progress-bar{ width:100%; height:6px; background:#1e293b; border-radius:3px; margin-top:8px; overflow:hidden; }
    .progress-fill{ height:100%; background:var(--accent); width:0%; transition:width .3s; }
    .loading{ display:inline-block; width:20px; height:20px; border:3px solid #f3f3f3; border-top:3px solid var(--accent); border-radius:50%; animation:spin 1s linear infinite; margin-right:8px; }
    @keyframes spin{ 0%{ transform:rotate(0deg); } 100%{ transform:rotate(360deg); } }
    .canvas-placeholder{ width:100%; height:300px; background:#000; border-radius:6px; display:flex; align-items:center; justify-content:center; color:var(--muted); border:1px solid #334155; }
    .error-message{ color:#ef4444; font-size:0.8rem; margin-top:4px; }
    .controls-row{ display:flex; gap:8px; align-items:center; margin-top:8px; }
    .zoom-controls button{ padding:6px 8px; font-size:0.85rem; }
    .meta-line{ font-size:0.85rem; color:var(--muted); margin-top:6px; }
</style>

</head>
<body>
    <div class="app">
        <header>
            <h1>CNC AI — Multi Machine Raster Engraving</h1>
            <div style="display:flex; gap:12px; align-items:center;">
                <div id="cvState"><span class="loading"></span>جاري تحميل OpenCV...</div>
                <button id="themeToggle" title="تبديل الثيم">🌗</button>
            </div>
        </header><div class="grid">
        <!-- لوحة الصورة والمعاينة -->
        <div class="panel">
            <div class="file-input-container">
                <input id="fileInput" type="file" accept="image/*"/>
                <label class="file-input-label" for="fileInput">📁 اختر صورة للتحميل</label>
            </div>
            <div class="meta-line" id="imageMeta">لا توجد صورة محملة</div>

            <div class="tabs">
                <button data-tab="original" class="active">🖼️ الصورة الأصلية</button>
                <button data-tab="heatmap">🔥 خريطة الحرارة</button>
                <button data-tab="contour">📐 كشف الحواف</button>
                <button data-tab="simulation">🎬 محاكاة التشغيل</button>
            </div>

            <div id="original" class="tab-content active">
                <div class="canvas-placeholder" id="originalPlaceholder">سيتم عرض الصورة هنا</div>
                <div style="display:flex; gap:8px; align-items:center; margin-top:8px;">
                    <div class="zoom-controls">
                        <button id="origZoomIn">+</button>
                        <button id="origZoomOut">−</button>
                        <button id="origReset">⟲</button>
                    </div>
                    <div class="controls-row">
                        <label><input type="checkbox" id="autoResize" checked/> ضغط الصورة تلقائياً للسرعة</label>
                    </div>
                </div>
                <canvas id="canvasOriginal" style="display:none; transform-origin:top left;"></canvas>
            </div>

            <div id="heatmap" class="tab-content">
                <div class="canvas-placeholder" id="heatmapPlaceholder">خريطة الحرارة ستظهر هنا بعد تحميل الصورة</div>
                <div style="display:flex; gap:8px; align-items:center; margin-top:8px;">
                    <div class="zoom-controls">
                        <button id="heatZoomIn">+</button>
                        <button id="heatZoomOut">−</button>
                        <button id="heatReset">⟲</button>
                    </div>
                    <div class="controls-row">
                        <label>Colormap: <select id="colormapSelect"><option value="jet">Jet</option><option value="hot">Hot</option><option value="cool">Cool</option><option value="gray">Gray</option></select></label>
                    </div>
                </div>
                <canvas id="canvasHeatmap" style="display:none; transform-origin:top left;"></canvas>
            </div>

            <div id="contour" class="tab-content">
                <div class="canvas-placeholder" id="contourPlaceholder">كشف الحواف سيظهر هنا بعد تحميل الصورة</div>
                <div style="display:flex; gap:8px; align-items:center; margin-top:8px;">
                    <div class="zoom-controls">
                        <button id="contZoomIn">+</button>
                        <button id="contZoomOut">−</button>
                        <button id="contReset">⟲</button>
                    </div>
                    <div class="controls-row">
                        <label><input type="checkbox" id="showAllContours" checked/> إظهار الكونتورات التفصيلية</label>
                    </div>
                </div>
                <canvas id="canvasContour" style="display:none; transform-origin:top left;"></canvas>
            </div>

            <div id="simulation" class="tab-content">
                <div id="threeContainer">
                    <div class="canvas-placeholder" id="simulationPlaceholder">محاكاة التشغيل ستظهر هنا بعد توليد G-code</div>
                </div>
            </div>
        </div>

        <!-- لوحة التحكم والإعدادات -->
        <div class="panel">
            <!-- إعدادات الماكينة -->
            <div class="panel-section">
                <h3>⚙️ إعدادات الماكينة</h3>

                <label for="machineType">نوع الماكينة</label>
                <select id="machineType">
                    <option value="router">Router CNC</option>
                    <option value="laser">Laser Engraver</option>
                    <option value="plasma">Plasma Cutter</option>
                    <option value="3dprinter">3D Printer</option>
                </select>

                <div class="info-text" id="machineDescription">Router CNC - مناسبة للنحت على الخشب والأكريليك والمعادن اللينة</div>
            </div>

            <!-- إعدادات حجم العمل -->
            <div class="panel-section">
                <h3>📏 إعدادات حجم العمل</h3>

                <div class="input-group">
                    <div>
                        <label for="workWidth">عرض العمل (سم)</label>
                        <input id="workWidth" type="number" value="30" step="0.1" min="1" max="100"/>
                        <div class="dimension-info" id="widthMm">300.0 مم</div>
                    </div>

                    <div>
                        <label for="workHeight">ارتفاع العمل (سم)</label>
                        <input id="workHeight" type="number" value="20" step="0.1" min="1" max="100"/>
                        <div class="dimension-info" id="heightMm">200.0 مم</div>
                    </div>
                </div>

                <label for="workDepth">عمق العمل (مم)</label>
                <input id="workDepth" type="number" value="3.0" step="0.1" min="0.1" max="20"/>

                <div class="settings-row">
                    <div class="input-group">
                        <div>
                            <label for="originX">نقطة الأصل X (سم)</label>
                            <input id="originX" type="number" value="0" step="0.1"/>
                        </div>

                        <div>
                            <label for="originY">نقطة الأصل Y (سم)</label>
                            <input id="originY" type="number" value="0" step="0.1"/>
                        </div>
                    </div>

                    <button id="btnCenterOrigin" class="secondary">🎯 توسيط نقطة الأصل</button>
                </div>
            </div>

            <!-- إعدادات الخامة -->
            <div class="panel-section">
                <h3>📦 إعدادات الخامة</h3>

                <label for="materialType">نوع الخامة</label>
                <select id="materialType">
                    <option value="wood">خشب</option>
                    <option value="acrylic">أكريليك</option>
                    <option value="aluminum">ألومنيوم</option>
                    <option value="steel">صلب</option>
                    <option value="brass">نحاس</option>
                    <option value="plastic">بلاستيك</option>
                    <option value="foam">رغوة</option>
                    <option value="custom">مخصص</option>
                </select>

                <div id="materialPresets"></div>
            </div>

            <!-- إعدادات التشغيل -->
            <div class="panel-section">
                <h3>🚀 إعدادات التشغيل</h3>

                <label for="feedRate">سرعة التغذية (مم/دقيقة)</label>
                <input id="feedRate" type="number" value="800" min="10" max="5000"/>

                <label for="safeZ">ارتفاع الأمان (مم)</label>
                <input id="safeZ" type="number" value="5" step="0.1" min="0" max="50"/>

                <label for="invertZ">عكس المحور Z</label>
                <select id="invertZ"><option value="no">لا</option><option value="yes">نعم</option></select>

                <label for="scanDir">اتجاه المسارات</label>
                <select id="scanDir"><option value="x">أفقي (X)</option><option value="y">رأسي (Y)</option><option value="diag">قطري (Diagonal)</option></select>

                <label for="stepOver">خطوة المسح (مم)</label>
                <input id="stepOver" type="number" value="5" step="0.1" min="0.1" max="20"/>

                <label for="maxDepth">أقصى عمق (مم)</label>
                <input id="maxDepth" type="number" value="3.0" step="0.1" min="0.1" max="20"/>

                <div class="controls-row">
                    <label><input type="checkbox" id="includeComments" checked/> إضافة تعليقات في G-code</label>
                </div>
            </div>

            <!-- أزرار التحكم -->
            <div class="button-group">
                <button id="btnGen" class="primary">⚡ توليد G-code</button>
                <button id="btnQuick" class="secondary">🧪 اختبار سريع</button>
                <button id="btnDownload" class="secondary">💾 تحميل G-code</button>
            </div>

            <div id="estTime"></div>
            <div class="progress-bar" aria-hidden="true"><div class="progress-fill" id="procFill"></div></div>

            <label for="gcodeOut" style="margin-top:16px;">📄 مخرجات G-code</label>
            <textarea id="gcodeOut" readonly placeholder="سيظهر G-code هنا بعد التوليد..."></textarea>
        </div>
    </div>
</div>

<div id="toast"></div>

<script>
    // ======== متغيرات عامة ========
    let cvReady = false; let grayMat = null; let contour = null; let previewCanvas = null; let additionalContours = [];
    let scene, camera, renderer, controls; let simulation = { isPlaying:false, speed:1, currentLine:0, totalLines:0, animationId:null };
    const machineDefaults = { router:{feed:800,safeZ:5,maxDepth:3,stepOver:5,description:"Router CNC - مناسبة للنحت على الخشب والأكريليك والمعادن اللينة"}, laser:{feed:1200,safeZ:0,maxDepth:0,stepOver:0.2,description:"Laser Engraver - مناسبة للنقش على الخشب والجلود والأكريليك"}, plasma:{feed:1500,safeZ:3,maxDepth:0,stepOver:1,description:"Plasma Cutter - مناسبة لقطع المعادن بسمك مختلف"}, "3dprinter":{feed:1000,safeZ:0.2,maxDepth:0.2,stepOver:0.4,description:"3D Printer - للطباعة ثلاثية الأبعاد باستخدام تقنية FDM"} };

    // ======== مساعدات واجهة ========
    function showToast(msg, ms=3000){ const t=document.getElementById('toast'); t.textContent=msg; t.style.display='block'; clearTimeout(t._t); t._t=setTimeout(()=>t.style.display='none', ms); }
    function cmToMm(cm){ return cm*10; }
    function updateDimensionDisplay(){ const widthCm=parseFloat(document.getElementById('workWidth').value)||0; const heightCm=parseFloat(document.getElementById('workHeight').value)||0; document.getElementById('widthMm').textContent = cmToMm(widthCm).toFixed(1)+' مم'; document.getElementById('heightMm').textContent = cmToMm(heightCm).toFixed(1)+' مم'; }
    function showElement(elementId, hidePlaceholderId){ const element=document.getElementById(elementId); const placeholder=document.getElementById(hidePlaceholderId); if(element && placeholder){ element.style.display='block'; placeholder.style.display='none'; } }

    // ======== تحديث الثيم ========
    document.getElementById('themeToggle').addEventListener('click', ()=>{ document.body.classList.toggle('light'); localStorage.setItem('theme', document.body.classList.contains('light')?'light':'dark'); showToast('تم تبديل الثيم'); });
    (function(){ const t=localStorage.getItem('theme'); if(t==='light') document.body.classList.add('light'); })();

    // ======== Zoom controls (simple scale transform) ========
    function applyZoom(canvasId, scale){ const c=document.getElementById(canvasId); c.style.transform = `scale(${scale})`; c._scale = scale; }
    function addZoomButtons(prefix){ const inBtn=document.getElementById(prefix+'ZoomIn'); const outBtn=document.getElementById(prefix+'ZoomOut'); const reset=document.getElementById(prefix+'Reset'); let scale=1; inBtn?.addEventListener('click', ()=>{ scale = Math.min(4, scale+0.25); applyZoom(prefix==='orig'?'canvasOriginal': prefix==='heat'?'canvasHeatmap':'canvasContour', scale); }); outBtn?.addEventListener('click', ()=>{ scale = Math.max(0.25, scale-0.25); applyZoom(prefix==='orig'?'canvasOriginal': prefix==='heat'?'canvasHeatmap':'canvasContour', scale); }); reset?.addEventListener('click', ()=>{ scale=1; applyZoom(prefix==='orig'?'canvasOriginal': prefix==='heat'?'canvasHeatmap':'canvasContour', scale); }); }
    addZoomButtons('orig'); addZoomButtons('heat'); addZoomButtons('cont');

    // ======== Web Worker لـ G-code (تخفيف تجمّد الواجهة) ========
    function createGcodeWorker(){ const workerCode = `onmessage = function(e){ const {imgData, params} = e.data; try{ importScripts(); // placeholder
        // بسيطة: نفرض أننا نتلقى ماتريكس grayscale كمصفوفة bytes
        const {width, height, data} = imgData; const lines=[]; const feed=params.feed; const safeZ=params.safeZ; const maxDepth=params.maxDepth; const stepOver=params.stepOver; const dir=params.dir; const includeComments=params.includeComments; const originX=params.originX; const originY=params.originY; const invertZ=params.invertZ;
        lines.push('G21 G90 G17'); lines.push('G0 Z'+safeZ.toFixed(2)); let totalLen=0;
        const step = stepOver;
        const scaleX = params.scaleX; const scaleY = params.scaleY;
        function sample(x,y){ const xi=Math.max(0, Math.min(width-1, Math.round(x))); const yi=Math.max(0, Math.min(height-1, Math.round(y))); return data[yi*width + xi]; }
        if(dir==='x' || dir==='y'){
            const outer = dir==='x'?height:width;
            const inner = dir==='x'?width:height;
            for(let r=0;r<outer;r+=step){ const rowPoints=[]; for(let i=0;i<inner;i++){ const x = dir==='x'?i:r; const y = dir==='x'?r:i; const pv = sample(x,y); let z = -((255 - pv)/255.0)*maxDepth; if(invertZ) z=-z; const scaledX = (x*scaleX)+originX; const scaledY = (y*scaleY)+originY; rowPoints.push({x:scaledX,y:scaledY,z}); }
                if(rowPoints.length>0){ if(includeComments) lines.push('; Row '+r); lines.push('G0 X'+rowPoints[0].x.toFixed(2)+' Y'+rowPoints[0].y.toFixed(2)+' Z'+safeZ); lines.push('G1 F'+feed); for(let p of rowPoints){ lines.push('G1 X'+p.x.toFixed(2)+' Y'+p.y.toFixed(2)+' Z'+p.z.toFixed(3)); } lines.push('G0 Z'+safeZ); totalLen += rowPoints.length; }
                if(r%Math.max(1,Math.round(outer/10))===0){ postMessage({type:'progress', progress: Math.round((r/outer)*100)}); }
            }
        }
        lines.push('M5'); lines.push('M30'); postMessage({type:'done', gcode:lines.join('\n'), stats:{lines:lines.length, estItems:totalLen}});
    }catch(err){ postMessage({type:'error', message:err.message}); } };`;
        const blob = new Blob([workerCode], {type:'application/javascript'}); return new Worker(URL.createObjectURL(blob)); }

    // ======== OpenCV readiness ========
    function waitForCv(){ if(typeof cv !== 'undefined' && cv.getBuildInformation){ cvReady = true; document.getElementById('cvState').innerHTML = '✅ OpenCV جاهز'; showToast('تم تحميل OpenCV بنجاح',2000); } else { setTimeout(waitForCv,100); } }
    waitForCv();

    // ======== Tabs handling ========
    document.querySelectorAll('.tabs button').forEach(btn=>{ btn.addEventListener('click', ()=>{ document.querySelectorAll('.tabs button').forEach(b=>b.classList.remove('active')); document.querySelectorAll('.tab-content').forEach(tc=>tc.classList.remove('active')); btn.classList.add('active'); document.getElementById(btn.dataset.tab).classList.add('active'); if(btn.dataset.tab==='simulation' && document.getElementById('gcodeOut').value) initSimulation(); }); });

    // ======== Image loading & processing ========
    document.getElementById('fileInput').addEventListener('change', function(e){ const file = e.target.files[0]; if(!file) return; if(!file.type.match('image.*')){ showToast('الرجاء اختيار ملف صورة فقط'); return;} const img = new Image(); img.onload = function(){ previewCanvas = document.getElementById('canvasOriginal'); const ctx = previewCanvas.getContext('2d'); let width = img.width; let height = img.height; const autoResize = document.getElementById('autoResize').checked;
            const maxWidth = autoResize?800:1200; const maxHeight = autoResize?600:900;
            if(width>maxWidth){ height = Math.round((maxWidth/width)*height); width = maxWidth; }
            if(height>maxHeight){ width = Math.round((maxHeight/height)*width); height = maxHeight; }
            previewCanvas.width = width; previewCanvas.height = height; ctx.drawImage(img,0,0,width,height); showElement('canvasOriginal','originalPlaceholder'); document.getElementById('imageMeta').textContent = `حجم الصورة: ${img.width}×${img.height} — عرض للمعاينة: ${width}×${height}`;
            // تنظيف المات القديمة
            if(grayMat){ try{ grayMat.delete(); }catch(e){} }
            if(cvReady){ detectContours(); } else { showToast('جاري انتظار تحميل OpenCV...'); setTimeout(()=>{ if(cvReady) detectContours(); },1000);} }; img.onerror=function(){ showToast('خطأ في تحميل الصورة'); }; img.src = URL.createObjectURL(file); });

    // ======== Edge detection & heatmap & contour rendering ========
    function detectContours(){ if(!cvReady){ showToast('OpenCV غير جاهز بعد'); return; } try{ showToast('جاري معالجة الصورة...'); const src = cv.imread(previewCanvas); const gray = new cv.Mat(); cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY); const blurred = new cv.Mat(); cv.GaussianBlur(gray, blurred, new cv.Size(5,5), 0); const edges = new cv.Mat(); const median = cv.mean(blurred).w; const lowerThreshold = Math.max(0,(1.0-0.33)*median); const upperThreshold = Math.min(255,(1.0+0.33)*median); cv.Canny(blurred, edges, lowerThreshold, upperThreshold); const kernel = cv.getStructuringElement(cv.MORPH_RECT, new cv.Size(3,3)); cv.morphologyEx(edges, edges, cv.MORPH_CLOSE, kernel);
            const contours = new cv.MatVector(); const hierarchy = new cv.Mat(); cv.findContours(edges, contours, hierarchy, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE);
            const minArea = (gray.cols * gray.rows) * 0.01; const validContours = [];
            for(let i=0;i<contours.size();i++){ const cnt = contours.get(i); const area = cv.contourArea(cnt); if(area>minArea){ validContours.push({contour:cnt, area:area, boundingRect: cv.boundingRect(cnt)}); } }
            if(validContours.length>0){ validContours.sort((a,b)=>b.area-a.area); contour = validContours[0].contour; additionalContours = validContours.slice(1); showToast(`تم كشف ${validContours.length} كونتور`); } else { showToast('لم يتم العثور على حواف واضحة في الصورة'); }
            if(grayMat) grayMat.delete(); grayMat = gray.clone(); renderHeatmap(grayMat); renderContour(grayMat, contour); src.delete(); blurred.delete(); edges.delete(); hierarchy.delete(); kernel.delete(); contours.delete(); showToast('تم كشف الحواف بنجاح');
        }catch(error){ console.error('Error in detectContours:', error); showToast('خطأ في معالجة الصورة: '+error.message); } }

    function renderHeatmap(gray){ const heatCanvas = document.getElementById('canvasHeatmap'); const ctx = heatCanvas.getContext('2d'); heatCanvas.width = gray.cols; heatCanvas.height = gray.rows; const imgData = ctx.createImageData(heatCanvas.width, heatCanvas.height); const data = gray.data; const cmap = document.getElementById('colormapSelect').value;
        for(let i=0;i<data.length;i++){ const v = data[i]; const idx = i*4; let r=0,g=0,b=0; if(cmap==='jet'){ r = Math.min(255, Math.max(0, (v-128)*2)); g = Math.min(255, Math.max(0, 255 - Math.abs(v-128)*2)); b = Math.min(255, Math.max(0, (128-v)*2)); } else if(cmap==='hot'){ r=v; g=Math.round(v*0.5); b=Math.round(v*0.1); } else if(cmap==='cool'){ r=Math.round(255 - v); g=Math.round(v); b=255; } else { r=v; g=v; b=v; }
            imgData.data[idx]=r; imgData.data[idx+1]=g; imgData.data[idx+2]=b; imgData.data[idx+3]=255; }
        ctx.putImageData(imgData,0,0); showElement('canvasHeatmap','heatmapPlaceholder'); }

    function renderContour(gray, mainContour){ const contourCanvas = document.getElementById('canvasContour'); const ctx = contourCanvas.getContext('2d'); contourCanvas.width = gray.cols; contourCanvas.height = gray.rows; const heatCanvas = document.getElementById('canvasHeatmap'); ctx.drawImage(heatCanvas,0,0);
        if(mainContour){ ctx.strokeStyle='#00ff00'; ctx.lineWidth=2; ctx.beginPath(); const data = mainContour.data32S; for(let i=0;i<data.length;i+=2){ const x=data[i], y=data[i+1]; if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y); } ctx.closePath(); ctx.stroke(); }
        ctx.strokeStyle='#ffff00'; ctx.lineWidth=1; const showAll = document.getElementById('showAllContours').checked; if(showAll){ additionalContours.forEach(contInfo=>{ const cnt = contInfo.contour; ctx.beginPath(); const d = cnt.data32S; for(let i=0;i<d.length;i+=2){ const x=d[i], y=d[i+1]; if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y); } ctx.closePath(); ctx.stroke(); }); }
        showElement('canvasContour','contourPlaceholder'); }

    // ======== G-code generation (delegated to worker) ========
    function estimateTimeAndDistance(totalLen, feed){ const timeMin = (totalLen / (feed || 800)); document.getElementById('estTime').textContent = `⏱️ تقدير الوقت: ${timeMin.toFixed(1)} دقيقة — عناصر تقريبي: ${totalLen}`; }

    function generateRasterGcodeAsync(scaleDown=false){ return new Promise((resolve)=>{
        if(!grayMat || !contour){ showToast('لا توجد صورة جاهزة للمعالجة'); resolve(''); return; }
        const feed = parseFloat(document.getElementById('feedRate').value)||800; const safeZ = parseFloat(document.getElementById('safeZ').value)||5; const maxDepth = parseFloat(document.getElementById('maxDepth').value)||3; const stepOver = parseFloat(document.getElementById('stepOver').value)||5; const invertZ = document.getElementById('invertZ').value==='yes'; const dir = document.getElementById('scanDir').value; const includeComments = document.getElementById('includeComments').checked;
        const workWidth = cmToMm(parseFloat(document.getElementById('workWidth').value)||30); const workHeight = cmToMm(parseFloat(document.getElementById('workHeight').value)||20);
        const originX = cmToMm(parseFloat(document.getElementById('originX').value)||0); const originY = cmToMm(parseFloat(document.getElementById('originY').value)||0);
        const scaleX = workWidth / previewCanvas.width; const scaleY = workHeight / previewCanvas.height;
        // Extract grayscale buffer
        const w = grayMat.cols; const h = grayMat.rows; const buf = new Uint8ClampedArray(w*h);
        for(let i=0;i<w*h;i++) buf[i]=grayMat.data[i];
        const worker = createGcodeWorker();
        worker.onmessage = function(ev){ const d = ev.data; if(d.type==='progress'){ document.getElementById('procFill').style.width = d.progress + '%'; } else if(d.type==='done'){ document.getElementById('procFill').style.width = '100%'; estimateTimeAndDistance(d.stats.estItems, feed); resolve(d.gcode); worker.terminate(); } else if(d.type==='error'){ showToast('خطأ في الـ worker: '+d.message); resolve(''); worker.terminate(); } };
        worker.postMessage({ imgData:{ width:w, height:h, data:buf }, params:{ feed, safeZ, maxDepth, stepOver: Math.max(1, Math.round(stepOver)), dir, includeComments, originX, originY, invertZ, scaleX, scaleY } });
    }); }

    document.getElementById('btnGen').addEventListener('click', async ()=>{ document.getElementById('procFill').style.width='0%'; const gcode = await generateRasterGcodeAsync(false); document.getElementById('gcodeOut').value = gcode; if(gcode){ showToast('تم توليد G-code بنجاح'); document.querySelector('[data-tab="simulation"]').click(); } });
    document.getElementById('btnQuick').addEventListener('click', async ()=>{ document.getElementById('procFill').style.width='0%'; const gcode = await generateRasterGcodeAsync(true); document.getElementById('gcodeOut').value = gcode; if(gcode){ showToast('تم توليد G-code سريع بنجاح'); document.querySelector('[data-tab="simulation"]').click(); } });
    document.getElementById('btnDownload').addEventListener('click', ()=>{ const text = document.getElementById('gcodeOut').value; if(!text){ showToast('لا يوجد G-code لتحميله'); return; } const blob = new Blob([text], {type:'text/plain'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='cnc_output.gcode'; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); showToast('تم تحميل الملف بنجاح'); });

    document.getElementById('btnCenterOrigin').addEventListener('click', ()=>{ const workWidth=parseFloat(document.getElementById('workWidth').value)||0; const workHeight=parseFloat(document.getElementById('workHeight').value)||0; document.getElementById('originX').value=(workWidth/2).toFixed(1); document.getElementById('originY').value=(workHeight/2).toFixed(1); showToast('تم توسيط نقطة الأصل'); });
    document.getElementById('machineType').addEventListener('change',(e)=>{ const def = machineDefaults[e.target.value]; if(def){ document.getElementById('feedRate').value = def.feed; document.getElementById('safeZ').value = def.safeZ; document.getElementById('maxDepth').value = def.maxDepth; document.getElementById('stepOver').value = def.stepOver; document.getElementById('machineDescription').textContent = def.description; showToast(`تم تحميل إعدادات ${e.target.value}`); } });

    // ======== Simulation improvements ========
    function parseGcodeForSimulation(gcode){ const lines = gcode.split('\n'); const pathPoints = []; let currentPos = {x:0,y:0,z:0}; for(const line of lines){ const t=line.trim(); if(t.startsWith('G1')||t.startsWith('G0')){ const xm=t.match(/X([\d.-]+)/); const ym=t.match(/Y([\d.-]+)/); const zm=t.match(/Z([\d.-]+)/); if(xm) currentPos.x=parseFloat(xm[1]); if(ym) currentPos.y=parseFloat(ym[1]); if(zm) currentPos.z=parseFloat(zm[1]); pathPoints.push({...currentPos}); } } return pathPoints; }

    function createToolPathVisualization(pathPoints){ if(!pathPoints||pathPoints.length<2) return null; const points = pathPoints.map(p=> new THREE.Vector3(p.x, p.z+5, p.y)); const pathGeometry = new THREE.BufferGeometry().setFromPoints(points); const pathMaterial = new THREE.LineBasicMaterial({ color:0x00ff00 }); const pathLine = new THREE.Line(pathGeometry, pathMaterial); scene.add(pathLine); return pathLine; }

    function createToolModel(){ const toolGroup = new THREE.Group(); const toolGeometry = new THREE.CylinderGeometry(2,2,20,16); const toolMaterial = new THREE.MeshPhongMaterial({ color:0xff4444 }); const toolBody = new THREE.Mesh(toolGeometry, toolMaterial); toolGroup.add(toolBody); const tipGeometry = new THREE.ConeGeometry(3,8,16); const tipMaterial = new THREE.MeshPhongMaterial({ color:0xffff00 }); const toolTip = new THREE.Mesh(tipGeometry, tipMaterial); toolTip.position.y = -14; toolGroup.add(toolTip); toolGroup.position.set(0,25,0); return toolGroup; }

    function addSimulationControls(tool, toolPath){ const container=document.getElementById('threeContainer'); const controlsDiv=document.createElement('div'); controlsDiv.className='simulation-controls'; controlsDiv.innerHTML = `<button id="btnPlay">▶ تشغيل</button><button id="btnPause">⏸ إيقاف</button><button id="btnReset">⏹ إعادة تعيين</button>`; container.appendChild(controlsDiv); const infoDiv=document.createElement('div'); infoDiv.className='simulation-info'; infoDiv.innerHTML = `<div>الحالة: <span id="simStatus">جاهز</span></div><div>التقدم: <span id="simProgress">0%</span></div>`; container.appendChild(infoDiv);
        document.getElementById('btnPlay').addEventListener('click', ()=>{ document.getElementById('simStatus').textContent='جاري التشغيل'; showToast('بدأت المحاكاة'); simulation.isPlaying=true; simulateToolMotion(tool, toolPath); }); document.getElementById('btnPause').addEventListener('click', ()=>{ document.getElementById('simStatus').textContent='متوقف'; showToast('تم إيقاف المحاكاة'); simulation.isPlaying=false; }); document.getElementById('btnReset').addEventListener('click', ()=>{ document.getElementById('simStatus').textContent='جاهز'; document.getElementById('simProgress').textContent='0%'; simulation.isPlaying=false; simulation.currentLine=0; showToast('تم إعادة تعيين المحاكاة'); }); }

    function simulateToolMotion(tool, toolPath){ if(!toolPath || toolPath.length===0) return; if(simulation.animationId) cancelAnimationFrame(simulation.animationId); function step(){ if(!simulation.isPlaying) return; simulation.currentLine = Math.min(toolPath.length-1, simulation.currentLine+1); const p = toolPath[simulation.currentLine]; tool.position.set(p.x, p.z+5, p.y); document.getElementById('simProgress').textContent = Math.round((simulation.currentLine/toolPath.length)*100)+'%'; if(simulation.currentLine<toolPath.length-1) simulation.animationId = requestAnimationFrame(step); else { simulation.isPlaying=false; showToast('انتهت المحاكاة'); } } simulation.animationId = requestAnimationFrame(step); }

    function initSimulation(){ const container=document.getElementById('threeContainer'); container.innerHTML=''; try{ document.getElementById('simulationPlaceholder').style.display='none'; const gcode = document.getElementById('gcodeOut').value; if(!gcode) throw new Error('لا يوجد G-code للمحاكاة'); scene = new THREE.Scene(); scene.background = new THREE.Color(0x081224); camera = new THREE.PerspectiveCamera(75, container.clientWidth/container.clientHeight, 0.1, 1000); camera.position.set(100,100,100); renderer = new THREE.WebGLRenderer({antialias:true}); renderer.setSize(container.clientWidth, container.clientHeight); container.appendChild(renderer.domElement); controls = new THREE.OrbitControls(camera, renderer.domElement);
            const ambientLight = new THREE.AmbientLight(0x404040,0.6); scene.add(ambientLight); const directionalLight = new THREE.DirectionalLight(0xffffff,0.8); directionalLight.position.set(50,100,50); scene.add(directionalLight);
            const workWidth = cmToMm(parseFloat(document.getElementById('workWidth').value)||30); const workHeight = cmToMm(parseFloat(document.getElementById('workHeight').value)||20); const workDepth = parseFloat(document.getElementById('workDepth').value)||3;
            const materialGeometry = new THREE.BoxGeometry(workWidth, workDepth, workHeight);
            // procedural wood texture
            const woodCanvas = document.createElement('canvas'); woodCanvas.width=512; woodCanvas.height=512; const wctx = woodCanvas.getContext('2d'); wctx.fillStyle='#8B4513'; wctx.fillRect(0,0,512,512); for(let i=0;i<2000;i++){ const x=Math.random()*512, y=Math.random()*512, w= Math.random()*6; wctx.fillStyle='rgba(0,0,0,'+(Math.random()*0.08)+')'; wctx.fillRect(x,y,w,1); }
            const texture = new THREE.CanvasTexture(woodCanvas); const materialMaterial = new THREE.MeshPhongMaterial({ map:texture, transparent:true, opacity:0.95 }); const material = new THREE.Mesh(materialGeometry, materialMaterial); material.position.y = workDepth/2; scene.add(material);
            const toolPath = parseGcodeForSimulation(gcode); createToolPathVisualization(toolPath); const tool = createToolModel(); scene.add(tool);
            const gridHelper = new THREE.GridHelper(Math.max(workWidth, workHeight), 10); scene.add(gridHelper); const axesHelper = new THREE.AxesHelper(20); scene.add(axesHelper);
            function animate(){ requestAnimationFrame(animate); controls.update(); renderer.render(scene, camera); } animate(); addSimulationControls(tool, toolPath); showToast('تم تهيئة المحاكاة بنجاح'); }catch(error){ console.error('Error initializing simulation:', error); showToast('خطأ في تهيئة المحاكاة'); document.getElementById('simulationPlaceholder').style.display='flex'; } }

    // ======== Initialization ========
    document.addEventListener('DOMContentLoaded', function(){ updateDimensionDisplay(); document.getElementById('workWidth').addEventListener('input', updateDimensionDisplay); document.getElementById('workHeight').addEventListener('input', updateDimensionDisplay); showToast('تم تحميل التطبيق بنجاح',2000); // load presets
        const presets = {wood:{feed:600,safeZ:5,maxDepth:3,stepOver:4,desc:'خشب - افتراضي'}, acrylic:{feed:900,safeZ:3,maxDepth:2,stepOver:2,desc:'اكريليك - افتراضي'}}; const container=document.getElementById('materialPresets'); for(const k in presets){ const el=document.createElement('div'); el.className='material-preset'; el.innerHTML=`<div class="material-name">${k}</div><div class="material-details">${presets[k].desc}</div>`; el.addEventListener('click', ()=>{ document.getElementById('feedRate').value=presets[k].feed; document.getElementById('safeZ').value=presets[k].safeZ; document.getElementById('maxDepth').value=presets[k].maxDepth; document.getElementById('stepOver').value=presets[k].stepOver; document.querySelectorAll('.material-preset').forEach(n=>n.classList.remove('active')); el.classList.add('active'); showToast('تم تطبيق إعداد الخامة'); }); container.appendChild(el); }
    });
</script>

</body>
</html>
