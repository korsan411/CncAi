<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CNC AI Preview - النسخة المتطورة</title>
  <style>
    :root {
      --primary-color: #4a90e2;
      --secondary-color: #67b0f5;
      --bg-color: #f8f9fa;
      --text-color: #212529;
      --card-bg: #ffffff;
      --border-color: #dee2e6;
      --header-bg: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      --header-text: #ffffff;
      --button-bg: #e9ecef;
      --button-hover: #dee2e6;
      --success-color: #28a745;
      --warning-color: #ffc107;
      --error-color: #dc3545;
      --tab-inactive: #e9ecef;
      --tab-active: var(--primary-color);
      --edge-color: #ff5722;
    }

    body.dark {
      --bg-color: #121212;
      --text-color: #e0e0e0;
      --card-bg: #1e1e1e;
      --border-color: #444;
      --header-bg: linear-gradient(90deg, #2c2c2c, #444);
      --button-bg: #333;
      --button-hover: #555;
      --tab-inactive: #333;
      --tab-active: #4a90e2;
      --edge-color: #ff8a65;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      line-height: 1.6;
      transition: all 0.3s ease;
      padding: 0;
      margin: 0;
    }

    .container {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    header {
      background: var(--header-bg);
      color: var(--header-text);
      padding: 1rem;
      text-align: center;
      border-radius: 0 0 10px 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      margin-bottom: 2rem;
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      max-width: 1200px;
    }

    h1 {
      font-size: 1.8rem;
      margin: 0;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .controls {
      display: flex;
      gap: 15px;
      align-items: center;
    }

    #themeToggle {
      background: transparent;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--header-text);
      transition: transform 0.3s;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #themeToggle:hover {
      transform: scale(1.1);
      background: rgba(255, 255, 255, 0.2);
    }

    /* تنسيق التابات */
    .tabs {
      display: flex;
      margin-bottom: 20px;
      background: var(--card-bg);
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .tab {
      padding: 12px 20px;
      cursor: pointer;
      background: var(--tab-inactive);
      transition: all 0.3s;
      text-align: center;
      flex: 1;
      font-weight: 500;
    }

    .tab.active {
      background: var(--tab-active);
      color: white;
    }

    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    /* محتوى التابات */
    .upload-section {
      background: var(--card-bg);
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.05);
      margin-bottom: 2rem;
      text-align: center;
      border: 1px solid var(--border-color);
    }

    .file-upload {
      margin: 1rem 0;
    }

    .file-upload input[type="file"] {
      display: none;
    }

    .file-upload label {
      display: inline-block;
      padding: 10px 20px;
      background: var(--primary-color);
      color: white;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }

    .file-upload label:hover {
      background: var(--secondary-color);
    }

    .file-name {
      margin-top: 10px;
      font-size: 0.9rem;
      color: var(--text-color);
    }

    .previews-container {
      display: grid;
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    @media (min-width: 992px) {
      .previews-container {
        grid-template-columns: 1fr 1fr;
      }
    }

    .preview-block {
      background: var(--card-bg);
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 4px 8px rgba(0,0,0,0.05);
      display: flex;
      flex-direction: column;
      align-items: center;
      border: 1px solid var(--border-color);
    }

    .preview-title {
      font-size: 1.2rem;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--primary-color);
    }

    .preview-content {
      width: 100%;
      display: flex;
      justify-content: center;
      margin-bottom: 1rem;
    }

    canvas {
      max-width: 100%;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    #preview3d, #gcodeSimulation {
      width: 100%;
      height: 300px;
      border-radius: 8px;
      overflow: hidden;
      border: 1px solid var(--border-color);
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      position: relative;
    }

    .options {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      width: 100%;
      margin-top: 1rem;
    }

    .option-group {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 5px;
    }

    .option-group label {
      font-size: 0.9rem;
      font-weight: 500;
    }

    input[type="range"] {
      width: 150px;
      accent-color: var(--primary-color);
    }

    .settings-panel {
      background: var(--card-bg);
      border-radius: 10px;
      padding: 1.5rem;
      box-shadow: 0 4px 8px rgba(0,0,0,0.05);
      margin-bottom: 2rem;
      border: 1px solid var(--border-color);
    }

    .settings-group {
      margin-bottom: 1.5rem;
    }

    .settings-group h3 {
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
      color: var(--primary-color);
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }

    .form-group select, 
    .form-group input {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      background: var(--bg-color);
      color: var(--text-color);
    }

    .gcode-output {
      background: var(--bg-color);
      border: 1px solid var(--border-color);
      border-radius: 5px;
      padding: 15px;
      height: 200px;
      overflow-y: auto;
      font-family: monospace;
      white-space: pre-wrap;
      margin-top: 1rem;
    }

    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: var(--primary-color);
      color: white;
    }

    .btn-primary:hover {
      background: var(--secondary-color);
    }

    .btn-secondary {
      background: var(--button-bg);
      color: var(--text-color);
    }

    .btn-secondary:hover {
      background: var(--button-hover);
    }

    .btn-edge {
      background: var(--edge-color);
      color: white;
    }

    .btn-edge:hover {
      background: #ff7043;
    }

    .action-buttons {
      display: flex;
      gap: 10px;
      margin-top: 1rem;
      flex-wrap: wrap;
    }

    footer {
      text-align: center;
      margin-top: 3rem;
      padding: 1.5rem;
      color: var(--text-color);
      font-size: 0.9rem;
      border-top: 1px solid var(--border-color);
    }

    .image-enhancement {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
      margin: 1rem 0;
    }

    .enhancement-btn {
      padding: 8px 12px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      background: var(--button-bg);
      color: var(--text-color);
      cursor: pointer;
      text-align: center;
      transition: all 0.3s;
    }

    .enhancement-btn:hover {
      background: var(--button-hover);
    }

    .loading {
      display: none;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.7);
      justify-content: center;
      align-items: center;
      flex-direction: column;
      color: white;
      z-index: 100;
      border-radius: 8px;
    }

    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(255, 255, 255, 0.3);
      border-top: 4px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 8px;
      background: var(--success-color);
      color: white;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      transform: translateX(100%);
      opacity: 0;
      transition: all 0.3s ease;
      z-index: 1000;
    }

    .notification.show {
      transform: translateX(0);
      opacity: 1;
    }

    .notification.error {
      background: var(--error-color);
    }

    .simulation-controls {
      display: flex;
      gap: 10px;
      margin-top: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    .edge-controls {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-top: 1rem;
      width: 100%;
    }

    .edge-options {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
    }

    .colormap-controls {
      display: flex;
      gap: 10px;
      margin-top: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    @media (max-width: 768px) {
      h1 {
        font-size: 1.4rem;
      }
      
      .header-content {
        flex-direction: column;
        gap: 15px;
      }
      
      .preview-block {
        padding: 1rem;
      }
      
      .options {
        flex-direction: column;
        align-items: center;
      }
      
      .action-buttons {
        flex-direction: column;
      }
      
      .edge-options {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="header-content">
      <h1><span>🛠️</span> CNC AI Preview - النسخة المتطورة</h1>
      <div class="controls">
        <button id="themeToggle">🌙</button>
      </div>
    </div>
  </header>

  <div class="container">
    <!-- التابات -->
    <div class="tabs">
      <div class="tab active" data-tab="preview">معاينة الصورة</div>
      <div class="tab" data-tab="edges">استخراج الحواف</div>
      <div class="tab" data-tab="gcode">G-code إعدادات</div>
      <div class="tab" data-tab="simulation">معاينة 3D للكود</div>
    </div>

    <!-- تاب المعاينة -->
    <div class="tab-content active" id="preview-tab">
      <section class="upload-section">
        <h2 class="upload-title">📤 تحميل الصورة</h2>
        <div class="file-upload">
          <input type="file" id="fileInput" accept="image/*">
          <label for="fileInput"><span>📁</span> اختر صورة</label>
          <div class="file-name" id="fileName">لم يتم اختيار أي صورة بعد</div>
        </div>

        <div class="image-enhancement">
          <div class="enhancement-btn" onclick="applyEnhancement('brightness')">🔆 سطوع</div>
          <div class="enhancement-btn" onclick="applyEnhancement('contrast')">🌓 تباين</div>
          <div class="enhancement-btn" onclick="applyEnhancement('sharpen')">🔍 حدة</div>
          <div class="enhancement-btn" onclick="applyEnhancement('smooth')">🔄 نعومة</div>
          <div class="enhancement-btn" onclick="applyEnhancement('grayscale')">⚫ تدرج رمادي</div>
          <div class="enhancement-btn" onclick="applyEnhancement('reset')">🔄 إعادة تعيين</div>
        </div>
      </section>

      <div class="previews-container">
        <!-- الصورة الأصلية -->
        <div class="preview-block">
          <h3 class="preview-title">📷 الصورة الأصلية</h3>
          <div class="preview-content">
            <canvas id="preview2d"></canvas>
          </div>
        </div>

        <!-- معاينة 3D -->
        <div class="preview-block">
          <h3 class="preview-title">🌀 المعاينة ثلاثية الأبعاد</h3>
          <div class="preview-content">
            <div id="preview3d">
              <div class="loading" id="loading3d">
                <div class="loading-spinner"></div>
                <p>جاري تحميل النموذج...</p>
              </div>
            </div>
          </div>
          <div class="options">
            <div class="option-group">
              <label for="rotationSpeed">🔄 سرعة الدوران</label>
              <input type="range" id="rotationSpeed" min="0" max="0.05" step="0.001" value="0.01">
            </div>
            <div class="option-group">
              <label for="zoomControl">🔍 زوم</label>
              <input type="range" id="zoomControl" min="50" max="500" step="10" value="200">
            </div>
            <div class="option-group">
              <label for="heightIntensity">📏 شدة الارتفاع</label>
              <input type="range" id="heightIntensity" min="20" max="200" step="5" value="80">
            </div>
          </div>
        </div>

        <!-- Heatmap -->
        <div class="preview-block">
          <h3 class="preview-title">🌈 خريطة الارتفاعات (Heatmap)</h3>
          <div class="preview-content">
            <canvas id="heatmap"></canvas>
          </div>
          <div class="colormap-controls">
            <button class="btn btn-secondary" onclick="setColormap('jet')"><span>🌈</span> Jet</button>
            <button class="btn btn-secondary" onclick="setColormap('hot')"><span>🔥</span> Hot</button>
            <button class="btn btn-secondary" onclick="setColormap('cool')"><span>❄️</span> Cool</button>
            <button class="btn btn-secondary" onclick="setColormap('gray')"><span>⚪</span> Gray</button>
          </div>
        </div>
      </div>
    </div>

    <!-- تاب استخراج الحواف -->
    <div class="tab-content" id="edges-tab">
      <div class="preview-block">
        <h3 class="preview-title">🔍 استخراج الحواف</h3>
        <div class="preview-content">
          <canvas id="edgeCanvas"></canvas>
        </div>
        <div class="edge-controls">
          <div class="edge-options">
            <div class="option-group">
              <label for="edgeThreshold">🔺 عتبة الحواف (0-255)</label>
              <input type="range" id="edgeThreshold" min="0" max="255" value="128">
              <span id="thresholdValue">128</span>
            </div>
            <div class="option-group">
              <label for="edgeAlgorithm">⚙️ خوارزمية الاستخراج</label>
              <select id="edgeAlgorithm">
                <option value="sobel">Sobel (سوبل)</option>
                <option value="canny">Canny (كاني)</option>
                <option value="laplacian">Laplacian (لابلاس)</option>
              </select>
            </div>
          </div>
          <div class="action-buttons">
            <button class="btn btn-edge" onclick="extractEdges()">
              <span>🔍</span> استخراج الحواف
            </button>
            <button class="btn btn-primary" onclick="generateGcodeFromEdges()">
              <span>⚡</span> توليد G-code من الحواف
            </button>
            <button class="btn btn-secondary" onclick="previewEdge3D()">
              <span>🌀</span> معاينة 3D للحواف
            </button>
          </div>
        </div>
      </div>

      <div class="preview-block">
        <h3 class="preview-title">📊 معلومات الحواف</h3>
        <div id="edgeInfo">
          <p>📏 عدد النقاط: <span id="edgePoints">0</span></p>
          <p>📐 الطول الإجمالي: <span id="edgeLength">0</span> بكسل</p>
          <p>🔍 عدد الحواف: <span id="edgeCount">0</span></p>
          <p>⚡ الحالة: <span id="edgeStatus">في انتظار الاستخراج</span></p>
        </div>
      </div>
    </div>

    <!-- تاب إعدادات G-code -->
    <div class="tab-content" id="gcode-tab">
      <div class="settings-panel">
        <div class="settings-group">
          <h3><span>🏭</span> إعدادات الماكينة</h3>
          <div class="form-group">
            <label for="machineType">نوع الماكينة</label>
            <select id="machineType">
              <option value="cnc">CNC Router</option>
              <option value="laser">Laser Cutter</option>
              <option value="3dprinter">3D Printer</option>
            </select>
          </div>
        </div>

        <div class="settings-group">
          <h3><span>📦</span> إعدادات الخامة</h3>
          <div class="form-group">
            <label for="materialType">نوع الخامة</label>
            <select id="materialType">
              <option value="wood">خشب</option>
              <option value="acrylic">أكريليك</option>
              <option value="aluminum">ألومنيوم</option>
              <option value="steel">صلب</option>
              <option value="pla">PLA (بلاستيك)</option>
              <option value="abs">ABS (بلاستيك)</option>
            </select>
          </div>
        </div>

        <div class="settings-group">
          <h3><span>⚙️</span> إعدادات القطع</h3>
          <div class="form-group">
            <label for="feedRate">سرعة التغذية (mm/min)</label>
            <input type="number" id="feedRate" value="1000">
          </div>
          <div class="form-group">
            <label for="spindleSpeed">سرعة المغزل (RPM)</label>
            <input type="number" id="spindleSpeed" value="10000">
          </div>
          <div class="form-group">
            <label for="cutDepth">عمق القطع (mm)</label>
            <input type="number" id="cutDepth" value="2" step="0.1">
          </div>
          <div class="form-group">
            <label for="passDepth">عمق التمريرة (mm)</label>
            <input type="number" id="passDepth" value="0.5" step="0.1">
          </div>
        </div>

        <div class="settings-group">
          <h3><span>🔧</span> إعدادات G-code</h3>
          <div class="form-group">
            <label for="gcodeType">نوع المخرجات</label>
            <select id="gcodeType">
              <option value="heatmap">بناءً على Heatmap</option>
              <option value="3dmodel">بناءً على النموذج ثلاثي الأبعاد</option>
              <option value="edges">بناءً على الحواف</option>
            </select>
          </div>
          <div class="form-group">
            <label for="gcodePrecision">دقة التوليد</label>
            <select id="gcodePrecision">
              <option value="low">منخفضة (أسرع)</option>
              <option value="medium" selected>متوسطة</option>
              <option value="high">عالية (أبطأ)</option>
            </select>
          </div>
        </div>

        <div class="action-buttons">
          <button class="btn btn-primary" onclick="generateGcode()">
            <span>⚡</span> توليد G-code
          </button>
          <button class="btn btn-secondary" onclick="downloadGcode()">
            <span>💾</span> حفظ G-code
          </button>
          <button class="btn btn-secondary" onclick="previewGcode3D()">
            <span>🌀</span> معاينة 3D للكود
          </button>
        </div>

        <div class="gcode-output" id="gcodeOutput">
// سيظهر كود G-code هنا بعد التوليد
// اضغط على "توليد G-code" لبدء عملية التوليد
        </div>
      </div>
    </div>

    <!-- تاب معاينة 3D للكود -->
    <div class="tab-content" id="simulation-tab">
      <div class="preview-block">
        <h3 class="preview-title">🌀 معاينة ثلاثية الأبعاد للكود المولد</h3>
        <div class="preview-content">
          <div id="gcodeSimulation">
            <div class="loading" id="loadingSimulation">
              <div class="loading-spinner"></div>
              <p>جاري تحميل المحاكاة...</p>
            </div>
          </div>
        </div>
        <div class="simulation-controls">
          <button class="btn btn-secondary" onclick="startSimulation()">▶️ تشغيل</button>
          <button class="btn btn-secondary" onclick="pauseSimulation()">⏸️ إيقاف</button>
          <button class="btn btn-secondary" onclick="resetSimulation()">⏹️ إعادة تعيين</button>
          <div class="option-group">
            <label for="simulationSpeed">سرعة المحاكاة</label>
            <input type="range" id="simulationSpeed" min="1" max="10" step="1" value="5">
          </div>
        </div>
      </div>

      <div class="preview-block">
        <h3 class="preview-title">📊 معلومات المحاكاة</h3>
        <div id="simulationInfo">
          <p>⏱️ الوقت المتوقع: <span id="simulationTime">0</span> دقيقة</p>
          <p>📏 المسافة الإجمالية: <span id="simulationDistance">0</span> مم</p>
          <p>🔧 عدد الأوامر: <span id="simulationCommands">0</span></p>
          <p>⚡ الحالة: <span id="simulationStatus">في انتظار التوليد</span></p>
        </div>
      </div>
    </div>
  </div>

  <footer>
    <p>تم التطوير باستخدام Three.js - مشروع CncAi Preview المتطور</p>
  </footer>

  <div class="notification" id="notification">تم تحميل الصورة بنجاح!</div>

  <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.min.js"></script>
  <script>
    // عناصر DOM
    const fileInput = document.getElementById('fileInput');
    const fileName = document.getElementById('fileName');
    const canvas2d = document.getElementById('preview2d');
    const ctx2d = canvas2d.getContext('2d');
    const heatmap = document.getElementById('heatmap');
    const ctxHeat = heatmap.getContext('2d');
    const edgeCanvas = document.getElementById('edgeCanvas');
    const edgeCtx = edgeCanvas.getContext('2d');
    const preview3d = document.getElementById('preview3d');
    const gcodeSimulation = document.getElementById('gcodeSimulation');
    const rotationSpeedInput = document.getElementById('rotationSpeed');
    const zoomControl = document.getElementById('zoomControl');
    const heightIntensity = document.getElementById('heightIntensity');
    const edgeThreshold = document.getElementById('edgeThreshold');
    const thresholdValue = document.getElementById('thresholdValue');
    const tabs = document.querySelectorAll('.tab');
    const tabContents = document.querySelectorAll('.tab-content');
    const gcodeOutput = document.getElementById('gcodeOutput');
    const notification = document.getElementById('notification');
    const loading3d = document.getElementById('loading3d');
    const loadingSimulation = document.getElementById('loadingSimulation');

    // إعداد Three.js للمعاينة
    let scene, camera, renderer, mesh;
    let simulationScene, simulationCamera, simulationRenderer;
    let rotationSpeed = 0.01;
    let currentColormap = 'jet';
    let heightFactor = 80;
    let heightMapData = null;
    let originalImageData = null;
    let simulation = null;
    let isSimulationPlaying = false;
    let edgePoints = [];
    let edgePaths = [];

    // تهيئة Three.js
    function initThreeJS() {
      // المشهد الرئيسي
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0xf0f0f0);
      camera = new THREE.PerspectiveCamera(45, preview3d.offsetWidth / preview3d.offsetHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      renderer.setSize(preview3d.offsetWidth, preview3d.offsetHeight);
      preview3d.appendChild(renderer.domElement);

      // مشهد المحاكاة
      simulationScene = new THREE.Scene();
      simulationScene.background = new THREE.Color(0xf0f0f0);
      simulationCamera = new THREE.PerspectiveCamera(45, gcodeSimulation.offsetWidth / gcodeSimulation.offsetHeight, 0.1, 1000);
      simulationRenderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      simulationRenderer.setSize(gcodeSimulation.offsetWidth, gcodeSimulation.offsetHeight);
      gcodeSimulation.appendChild(simulationRenderer.domElement);

      // إعداد الإضاءة
      setupLights(scene);
      setupLights(simulationScene);

      camera.position.z = 200;
      simulationCamera.position.z = 200;
    }

    // إعداد الإضاءة
    function setupLights(scene) {
      const ambientLight = new THREE.AmbientLight(0x404040, 1);
      scene.add(ambientLight);
      
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(1, 1, 1);
      scene.add(directionalLight);
      
      const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.4);
      directionalLight2.position.set(-1, -1, -1);
      scene.add(directionalLight2);
    }

    // تحديث قيمة عتبة الحواف
    edgeThreshold.addEventListener('input', function() {
      thresholdValue.textContent = this.value;
    });

    // تبديل التابات
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const tabId = tab.getAttribute('data-tab');
        
        // إلغاء تفعيل جميع التابات
        tabs.forEach(t => t.classList.remove('active'));
        tabContents.forEach(tc => tc.classList.remove('active'));
        
        // تفعيل التاب المحدد
        tab.classList.add('active');
        document.getElementById(`${tabId}-tab`).classList.add('active');
      });
    });

    // دالة لتحسين الصورة
    function applyEnhancement(type) {
      if (!originalImageData) {
        showNotification('يجب تحميل صورة أولاً', true);
        return;
      }

      const canvas = document.createElement('canvas');
      canvas.width = canvas2d.width;
      canvas.height = canvas2d.height;
      const ctx = canvas.getContext('2d');
      ctx.putImageData(originalImageData, 0, 0);

      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;

      switch(type) {
        case 'brightness':
          // زيادة السطوع
          for (let i = 0; i < data.length; i += 4) {
            data[i] = Math.min(255, data[i] + 30);
            data[i+1] = Math.min(255, data[i+1] + 30);
            data[i+2] = Math.min(255, data[i+2] + 30);
          }
          break;
        case 'contrast':
          // زيادة التباين
          const factor = 1.2;
          for (let i = 0; i < data.length; i += 4) {
            data[i] = Math.min(255, Math.max(0, factor * (data[i] - 128) + 128));
            data[i+1] = Math.min(255, Math.max(0, factor * (data[i+1] - 128) + 128));
            data[i+2] = Math.min(255, Math.max(0, factor * (data[i+2] - 128) + 128));
          }
          break;
        case 'sharpen':
          // زيادة الحدة (تصفية بسيطة)
          const weights = [0, -1, 0, -1, 5, -1, 0, -1, 0];
          const tempData = new Uint8ClampedArray(data);
          for (let y = 1; y < canvas.height - 1; y++) {
            for (let x = 1; x < canvas.width - 1; x++) {
              for (let c = 0; c < 3; c++) {
                let sum = 0;
                for (let ky = -1; ky <= 1; ky++) {
                  for (let kx = -1; kx <= 1; kx++) {
                    const idx = ((y + ky) * canvas.width + (x + kx)) * 4 + c;
                    const weight = weights[(ky + 1) * 3 + (kx + 1)];
                    sum += tempData[idx] * weight;
                  }
                }
                const idx = (y * canvas.width + x) * 4 + c;
                data[idx] = Math.min(255, Math.max(0, sum));
              }
            }
          }
          break;
        case 'smooth':
          // تطبيق نعومة (تصفية Gaussian بسيطة)
          for (let y = 1; y < canvas.height - 1; y++) {
            for (let x = 1; x < canvas.width - 1; x++) {
              for (let c = 0; c < 3; c++) {
                let sum = 0;
                for (let ky = -1; ky <= 1; ky++) {
                  for (let kx = -1; kx <= 1; kx++) {
                    const idx = ((y + ky) * canvas.width + (x + kx)) * 4 + c;
                    sum += data[idx];
                  }
                }
                const idx = (y * canvas.width + x) * 4 + c;
                data[idx] = sum / 9;
              }
            }
          }
          break;
        case 'grayscale':
          // تحويل إلى تدرج رمادي
          for (let i = 0; i < data.length; i += 4) {
            const gray = 0.299 * data[i] + 0.587 * data[i+1] + 0.114 * data[i+2];
            data[i] = data[i+1] = data[i+2] = gray;
          }
          break;
        case 'reset':
          // إعادة تعيين للصورة الأصلية
          ctx2d.putImageData(originalImageData, 0, 0);
          generateHeightMap();
          return;
      }

      ctx.putImageData(imageData, 0, 0);
      ctx2d.drawImage(canvas, 0, 0);
      generateHeightMap();
    }

    // توليد خريطة الارتفاعات
    function generateHeightMap() {
      const width = canvas2d.width;
      const height = canvas2d.height;
      
      // ضبط أبعاد الـ heatmap
      heatmap.width = width;
      heatmap.height = height;
      
      // نسخ الصورة من canvas2d إلى heatmap
      ctxHeat.drawImage(canvas2d, 0, 0, width, height);
      
      // تحويل إلى تدرج رمادي للحصول على بيانات الارتفاع
      const imageData = ctxHeat.getImageData(0, 0, width, height);
      const grayData = new Uint8ClampedArray(width * height);
      
      for (let i = 0, j = 0; i < imageData.data.length; i += 4, j++) {
        const r = imageData.data[i];
        const g = imageData.data[i+1];
        const b = imageData.data[i+2];
        grayData[j] = Math.round(0.299 * r + 0.587 * g + 0.114 * b);
      }
      
      heightMapData = grayData;
      applyColormap();
    }

    // تطبيق خريطة الألوان
    function applyColormap() {
      if (!heightMapData) return;
      
      const width = heatmap.width;
      const height = heatmap.height;
      const imageData = ctxHeat.createImageData(width, height);
      
      for (let i = 0, j = 0; i < imageData.data.length; i += 4, j++) {
        const value = heightMapData[j];
        let r, g, b;
        
        switch(currentColormap) {
          case 'jet':
            // خريطة ألوان Jet
            r = Math.min(255, Math.max(0, Math.round(255 * (1.5 - 4 * Math.abs(value/255 - 0.75)))));
            g = Math.min(255, Math.max(0, Math.round(255 * (1.5 - 4 * Math.abs(value/255 - 0.5)))));
            b = Math.min(255, Math.max(0, Math.round(255 * (1.5 - 4 * Math.abs(value/255 - 0.25)))));
            break;
          case 'hot':
            // خريطة ألوان Hot
            r = Math.min(255, Math.round(255 * value / 255 * 3));
            g = Math.min(255, Math.round(255 * Math.max(0, value / 255 * 3 - 1)));
            b = Math.min(255, Math.round(255 * Math.max(0, value / 255 * 3 - 2)));
            break;
          case 'cool':
            // خريطة ألوان Cool
            r = Math.round(value / 255 * 255);
            g = Math.round(255 - value / 255 * 255);
            b = 255;
            break;
          case 'gray':
          default:
            // تدرج رمادي
            r = g = b = value;
            break;
        }
        
        imageData.data[i] = r;
        imageData.data[i+1] = g;
        imageData.data[i+2] = b;
        imageData.data[i+3] = 255;
      }
      
      ctxHeat.putImageData(imageData, 0, 0);
      update3DPreview();
    }

    // تحديث المعاينة ثلاثية الأبعاد
    function update3DPreview() {
      if (!heightMapData || !scene) return;
      
      // إزالة الشبكة القديمة
      if (mesh) {
        scene.remove(mesh);
        mesh.geometry.dispose();
        mesh.material.dispose();
      }
      
      const width = heatmap.width;
      const height = heatmap.height;
      const geometry = new THREE.PlaneGeometry(width, height, width-1, height-1);
      const vertices = geometry.attributes.position.array;
      
      // تطبيق بيانات الارتفاع
      for (let i = 0, j = 0; i < vertices.length; i += 3, j++) {
        if (j < heightMapData.length) {
          vertices[i+2] = (heightMapData[j] / 255) * heightFactor;
        }
      }
      
      geometry.computeVertexNormals();
      
      const material = new THREE.MeshLambertMaterial({ 
        color: 0x4a90e2,
        wireframe: false,
        side: THREE.DoubleSide
      });
      
      mesh = new THREE.Mesh(geometry, material);
      mesh.rotation.x = -Math.PI / 2;
      scene.add(mesh);
      
      // تحديث عرض المحاكاة
      updateSimulationPreview();
    }

    // تحديث معاينة المحاكاة
    function updateSimulationPreview() {
      if (!heightMapData || !simulationScene) return;
      
      // إزالة النموذج القديم
      simulationScene.children = simulationScene.children.filter(child => child.type !== 'Mesh');
      setupLights(simulationScene);
      
      const width = heatmap.width;
      const height = heatmap.height;
      const geometry = new THREE.PlaneGeometry(width, height, width-1, height-1);
      const vertices = geometry.attributes.position.array;
      
      // تطبيق بيانات الارتفاع
      for (let i = 0, j = 0; i < vertices.length; i += 3, j++) {
        if (j < heightMapData.length) {
          vertices[i+2] = (heightMapData[j] / 255) * heightFactor;
        }
      }
      
      geometry.computeVertexNormals();
      
      const material = new THREE.MeshLambertMaterial({ 
        color: 0x4a90e2,
        wireframe: true,
        side: THREE.DoubleSide
      });
      
      const simulationMesh = new THREE.Mesh(geometry, material);
      simulationMesh.rotation.x = -Math.PI / 2;
      simulationScene.add(simulationMesh);
    }

    // استخراج الحواف
    function extractEdges() {
      if (!originalImageData) {
        showNotification('يجب تحميل صورة أولاً', true);
        return;
      }
      
      const width = canvas2d.width;
      const height = canvas2d.height;
      
      // ضبط أبعاد canvas الحواف
      edgeCanvas.width = width;
      edgeCanvas.height = height;
      
      // نسخ الصورة الأصلية
      const imageData = new ImageData(
        new Uint8ClampedArray(originalImageData.data),
        width,
        height
      );
      
      const data = imageData.data;
      const threshold = parseInt(edgeThreshold.value);
      const algorithm = document.getElementById('edgeAlgorithm').value;
      
      // تحويل إلى تدرج رمادي
      const grayData = new Uint8ClampedArray(width * height);
      for (let i = 0, j = 0; i < data.length; i += 4, j++) {
        grayData[j] = Math.round(0.299 * data[i] + 0.587 * data[i+1] + 0.114 * data[i+2]);
      }
      
      // تطبيق خوارزمية استخراج الحواف
      let edgeData;
      switch(algorithm) {
        case 'sobel':
          edgeData = applySobel(grayData, width, height, threshold);
          break;
        case 'canny':
          edgeData = applyCanny(grayData, width, height, threshold);
          break;
        case 'laplacian':
          edgeData = applyLaplacian(grayData, width, height, threshold);
          break;
        default:
          edgeData = applySobel(grayData, width, height, threshold);
      }
      
      // رسم الحواف على canvas
      const edgeImageData = new ImageData(width, height);
      for (let i = 0, j = 0; i < edgeImageData.data.length; i += 4, j++) {
        edgeImageData.data[i] = edgeData[j] > 0 ? 255 : 0;
        edgeImageData.data[i+1] = edgeData[j] > 0 ? 255 : 0;
        edgeImageData.data[i+2] = edgeData[j] > 0 ? 255 : 0;
        edgeImageData.data[i+3] = 255;
      }
      
      edgeCtx.putImageData(edgeImageData, 0, 0);
      
      // استخراج مسارات الحواف
      extractEdgePaths(edgeData, width, height);
      
      // تحديث معلومات الحواف
      updateEdgeInfo();
      
      showNotification('تم استخراج الحواف بنجاح');
    }

    // تطبيق خوارزمية Sobel
    function applySobel(data, width, height, threshold) {
      const sobelX = [-1, 0, 1, -2, 0, 2, -1, 0, 1];
      const sobelY = [-1, -2, -1, 0, 0, 0, 1, 2, 1];
      
      const result = new Uint8ClampedArray(width * height);
      
      for (let y = 1; y < height - 1; y++) {
        for (let x = 1; x < width - 1; x++) {
          let gx = 0, gy = 0;
          
          for (let ky = -1; ky <= 1; ky++) {
            for (let kx = -1; kx <= 1; kx++) {
              const idx = (y + ky) * width + (x + kx);
              const kernelIdx = (ky + 1) * 3 + (kx + 1);
              
              gx += data[idx] * sobelX[kernelIdx];
              gy += data[idx] * sobelY[kernelIdx];
            }
          }
          
          const magnitude = Math.sqrt(gx * gx + gy * gy);
          result[y * width + x] = magnitude > threshold ? 255 : 0;
        }
      }
      
      return result;
    }

    // تطبيق خوارزمية Canny (مبسطة)
    function applyCanny(data, width, height, threshold) {
      // تطبيق Gaussian blur أولاً
      const blurred = applyGaussianBlur(data, width, height);
      
      // ثم تطبيق Sobel
      return applySobel(blurred, width, height, threshold);
    }

    // تطبيق Gaussian blur
    function applyGaussianBlur(data, width, height) {
      const kernel = [1, 2, 1, 2, 4, 2, 1, 2, 1];
      const result = new Uint8ClampedArray(width * height);
      
      for (let y = 1; y < height - 1; y++) {
        for (let x = 1; x < width - 1; x++) {
          let sum = 0;
          
          for (let ky = -1; ky <= 1; ky++) {
            for (let kx = -1; kx <= 1; kx++) {
              const idx = (y + ky) * width + (x + kx);
              const kernelIdx = (ky + 1) * 3 + (kx + 1);
              
              sum += data[idx] * kernel[kernelIdx];
            }
          }
          
          result[y * width + x] = sum / 16;
        }
      }
      
      return result;
    }

    // تطبيق خوارزمية Laplacian
    function applyLaplacian(data, width, height, threshold) {
      const kernel = [0, -1, 0, -1, 4, -1, 0, -1, 0];
      const result = new Uint8ClampedArray(width * height);
      
      for (let y = 1; y < height - 1; y++) {
        for (let x = 1; x < width - 1; x++) {
          let sum = 0;
          
          for (let ky = -1; ky <= 1; ky++) {
            for (let kx = -1; kx <= 1; kx++) {
              const idx = (y + ky) * width + (x + kx);
              const kernelIdx = (ky + 1) * 3 + (kx + 1);
              
              sum += data[idx] * kernel[kernelIdx];
            }
          }
          
          result[y * width + x] = Math.abs(sum) > threshold ? 255 : 0;
        }
      }
      
      return result;
    }

    // استخراج مسارات الحواف
    function extractEdgePaths(edgeData, width, height) {
      edgePoints = [];
      edgePaths = [];
      
      // إنشاء مصفوفة زيارة
      const visited = new Array(width * height).fill(false);
      
      // البحث عن نقاط الحواف
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          const idx = y * width + x;
          
          if (edgeData[idx] > 0 && !visited[idx]) {
            const path = traceEdgePath(edgeData, visited, x, y, width, height);
            if (path.length > 10) { // تجاهل المسارات القصيرة جداً
              edgePaths.push(path);
              edgePoints.push(...path);
            }
          }
        }
      }
    }

    // تتبع مسار الحافة
    function traceEdgePath(edgeData, visited, startX, startY, width, height) {
      const path = [];
      const stack = [[startX, startY]];
      
      while (stack.length > 0) {
        const [x, y] = stack.pop();
        const idx = y * width + x;
        
        if (x < 0 || x >= width || y < 0 || y >= height || visited[idx] || edgeData[idx] === 0) {
          continue;
        }
        
        visited[idx] = true;
        path.push([x, y]);
        
        // إضافة الجيران إلى المكدس
        for (let dy = -1; dy <= 1; dy++) {
          for (let dx = -1; dx <= 1; dx++) {
            if (dx === 0 && dy === 0) continue;
            stack.push([x + dx, y + dy]);
          }
        }
      }
      
      return path;
    }

    // تحديث معلومات الحواف
    function updateEdgeInfo() {
      document.getElementById('edgePoints').textContent = edgePoints.length;
      document.getElementById('edgeCount').textContent = edgePaths.length;
      
      // حساب الطول الإجمالي للحواف
      let totalLength = 0;
      for (const path of edgePaths) {
        for (let i = 1; i < path.length; i++) {
          const [x1, y1] = path[i-1];
          const [x2, y2] = path[i];
          totalLength += Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
        }
      }
      
      document.getElementById('edgeLength').textContent = Math.round(totalLength);
      document.getElementById('edgeStatus').textContent = 'تم الاستخراج';
    }

    // توليد G-code من الحواف
    function generateGcodeFromEdges() {
      if (edgePaths.length === 0) {
        showNotification('يجب استخراج الحواف أولاً', true);
        return;
      }
      
      let gcode = `; G-code generated from edge detection\n`;
      gcode += `; Number of edge paths: ${edgePaths.length}\n`;
      gcode += `; Total points: ${edgePoints.length}\n\n`;
      
      gcode += `G21 ; Set units to millimeters\n`;
      gcode += `G90 ; Absolute positioning\n`;
      gcode += `G17 ; XY plane selection\n`;
      gcode += `G94 ; Units per minute feed rate\n\n`;
      
      // إعدادات القطع
      const feedRate = document.getElementById('feedRate').value;
      const spindleSpeed = document.getElementById('spindleSpeed').value;
      const cutDepth = document.getElementById('cutDepth').value;
      
      gcode += `M3 S${spindleSpeed} ; Spindle on clockwise\n`;
      gcode += `G4 P2 ; Wait for spindle to reach speed\n\n`;
      
      // تحجيم المسارات لتتناسب مع مساحة العمل
      const scale = 0.1; // تحجيم من البكسل إلى المليمتر
      
      for (let i = 0; i < edgePaths.length; i++) {
        const path = edgePaths[i];
        if (path.length === 0) continue;
        
        gcode += `; Path ${i+1}\n`;
        
        // الانتقال إلى نقطة البداية
        const [startX, startY] = path[0];
        gcode += `G0 X${(startX * scale).toFixed(2)} Y${(startY * scale).toFixed(2)} Z5\n`;
        gcode += `G1 Z-${cutDepth} F${feedRate/2}\n`;
        
        // قطع المسار
        for (let j = 1; j < path.length; j++) {
          const [x, y] = path[j];
          gcode += `G1 X${(x * scale).toFixed(2)} Y${(y * scale).toFixed(2)} F${feedRate}\n`;
        }
        
        // رفع الأداة في نهاية المسار
        gcode += `G0 Z5\n\n`;
      }
      
      gcode += `M5 ; Spindle off\n`;
      gcode += `G0 X0 Y0 ; Return to home\n`;
      gcode += `M30 ; Program end\n`;
      
      gcodeOutput.textContent = gcode;
      showNotification('تم توليد G-code من الحواف بنجاح');
    }

    // توليد G-code
    function generateGcode() {
      if (!heightMapData) {
        showNotification('يجب تحميل صورة أولاً', true);
        return;
      }
      
      const gcodeType = document.getElementById('gcodeType').value;
      const precision = document.getElementById('gcodePrecision').value;
      
      let gcode = '';
      
      switch(gcodeType) {
        case 'heatmap':
          gcode = generateGcodeFromHeatmap(precision);
          break;
        case '3dmodel':
          gcode = generateGcodeFrom3DModel(precision);
          break;
        case 'edges':
          if (edgePaths.length === 0) {
            showNotification('يجب استخراج الحواف أولاً', true);
            return;
          }
          generateGcodeFromEdges();
          return;
        default:
          gcode = generateGcodeFromHeatmap(precision);
      }
      
      gcodeOutput.textContent = gcode;
      showNotification('تم توليد G-code بنجاح');
    }

    // توليد G-code من Heatmap
    function generateGcodeFromHeatmap(precision) {
      const width = heatmap.width;
      const height = heatmap.height;
      const step = precision === 'high' ? 1 : precision === 'medium' ? 2 : 4;
      
      let gcode = `; G-code generated from heatmap\n`;
      gcode += `; Resolution: ${width}x${height}, Step: ${step}\n\n`;
      
      gcode += `G21 ; Set units to millimeters\n`;
      gcode += `G90 ; Absolute positioning\n`;
      gcode += `G17 ; XY plane selection\n`;
      gcode += `G94 ; Units per minute feed rate\n\n`;
      
      // إعدادات القطع
      const feedRate = document.getElementById('feedRate').value;
      const spindleSpeed = document.getElementById('spindleSpeed').value;
      const cutDepth = document.getElementById('cutDepth').value;
      const passDepth = document.getElementById('passDepth').value;
      
      gcode += `M3 S${spindleSpeed} ; Spindle on clockwise\n`;
      gcode += `G4 P2 ; Wait for spindle to reach speed\n\n`;
      
      // تحجيم المسارات لتتناسب مع مساحة العمل
      const scale = 0.1; // تحجيم من البكسل إلى المليمتر
      
      // محاكاة القطع الطبقي
      const maxPasses = Math.ceil(cutDepth / passDepth);
      
      for (let pass = 0; pass < maxPasses; pass++) {
        const currentDepth = Math.min((pass + 1) * passDepth, cutDepth);
        
        gcode += `; Pass ${pass + 1}, Depth: ${currentDepth.toFixed(2)}mm\n`;
        
        // مسح المنطقة
        for (let y = 0; y < height; y += step) {
          const reverse = y % (step * 2) === 0;
          const xStart = reverse ? width - 1 : 0;
          const xEnd = reverse ? 0 : width - 1;
          const xStep = reverse ? -step : step;
          
          // الانتقال إلى نقطة البداية
          gcode += `G0 X${(xStart * scale).toFixed(2)} Y${(y * scale).toFixed(2)} Z5\n`;
          gcode += `G1 Z-${currentDepth.toFixed(2)} F${feedRate/2}\n`;
          
          // قطع الصف
          for (let x = xStart; reverse ? x >= xEnd : x <= xEnd; x += xStep) {
            if (x < 0 || x >= width) continue;
            
            const idx = y * width + x;
            const heightValue = heightMapData[idx] / 255;
            
            // تعديل الارتفاع بناءً على البيانات (اختياري)
            const adaptiveZ = (currentDepth * heightValue).toFixed(2);
            
            gcode += `G1 X${(x * scale).toFixed(2)} Y${(y * scale).toFixed(2)} Z-${adaptiveZ} F${feedRate}\n`;
          }
          
          // رفع الأداة في نهاية الصف
          gcode += `G0 Z5\n`;
        }
        
        gcode += `\n`;
      }
      
      gcode += `M5 ; Spindle off\n`;
      gcode += `G0 X0 Y0 ; Return to home\n`;
      gcode += `M30 ; Program end\n`;
      
      return gcode;
    }

    // توليد G-code من النموذج ثلاثي الأبعاد
    function generateGcodeFrom3DModel(precision) {
      // هذه دالة مبسطة لمحاكاة التوليد من نموذج 3D
      // في التطبيق الحقيقي، ستكون أكثر تعقيداً
      
      let gcode = `; G-code generated from 3D model\n`;
      gcode += `; This is a simplified version\n\n`;
      
      gcode += `G21 ; Set units to millimeters\n`;
      gcode += `G90 ; Absolute positioning\n`;
      gcode += `G17 ; XY plane selection\n`;
      gcode += `G94 ; Units per minute feed rate\n\n`;
      
      // إضافة الأوامر الأساسية
      gcode += `M3 S10000 ; Spindle on\n`;
      gcode += `G4 P2 ; Wait for spindle\n\n`;
      
      // محاكاة حركة ثلاثية الأبعاد
      const scale = 0.05;
      
      for (let i = 0; i < 10; i++) {
        const x = Math.sin(i * 0.2) * 50 + 50;
        const y = i * 10;
        const z = Math.cos(i * 0.2) * 5;
        
        gcode += `G1 X${x.toFixed(2)} Y${y.toFixed(2)} Z${z.toFixed(2)} F1000\n`;
      }
      
      gcode += `\nM5 ; Spindle off\n`;
      gcode += `G0 X0 Y0 Z10 ; Return to home\n`;
      gcode += `M30 ; Program end\n`;
      
      return gcode;
    }

    // حفظ G-code
    function downloadGcode() {
      const gcode = gcodeOutput.textContent;
      
      if (!gcode || gcode.startsWith('//')) {
        showNotification('لا يوجد G-code لحفظه', true);
        return;
      }
      
      const blob = new Blob([gcode], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'cnc_program.gcode';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      showNotification('تم حفظ الملف بنجاح');
    }

    // معاينة 3D للحواف
    function previewEdge3D() {
      if (edgePaths.length === 0) {
        showNotification('يجب استخراج الحواف أولاً', true);
        return;
      }
      
      // إزالة النموذج القديم
      simulationScene.children = simulationScene.children.filter(child => child.type !== 'Line');
      setupLights(simulationScene);
      
      // رسم مسارات الحواف
      const scale = 0.1;
      const material = new THREE.LineBasicMaterial({ color: 0xff0000 });
      
      for (const path of edgePaths) {
        if (path.length < 2) continue;
        
        const points = [];
        for (const [x, y] of path) {
          points.push(new THREE.Vector3(x * scale, y * scale, 0));
        }
        
        const geometry = new THREE.BufferGeometry().setFromPoints(points);
        const line = new THREE.Line(geometry, material);
        simulationScene.add(line);
      }
      
      // تحديث الكاميرا
      simulationCamera.position.set(50, 50, 50);
      simulationCamera.lookAt(0, 0, 0);
      
      showNotification('تم عرض الحواف ثلاثية الأبعاد');
    }

    // معاينة 3D للكود
    function previewGcode3D() {
      if (!gcodeOutput.textContent || gcodeOutput.textContent.startsWith('//')) {
        showNotification('يجب توليد G-code أولاً', true);
        return;
      }
      
      // هذه دالة مبسطة لمحاكاة عرض G-code
      // في التطبيق الحقيقي، ستكون أكثر تعقيداً
      
      simulationScene.children = simulationScene.children.filter(child => child.type !== 'Line');
      setupLights(simulationScene);
      
      // محاكاة مسار G-code
      const material = new THREE.LineBasicMaterial({ color: 0x00ff00 });
      const points = [];
      
      // إضافة نقاط عشوائية لمحاكاة المسار
      for (let i = 0; i < 100; i++) {
        const x = Math.sin(i * 0.1) * 20;
        const y = Math.cos(i * 0.1) * 20;
        const z = i * 0.5;
        points.push(new THREE.Vector3(x, y, z));
      }
      
      const geometry = new THREE.BufferGeometry().setFromPoints(points);
      const line = new THREE.Line(geometry, material);
      simulationScene.add(line);
      
      // تحديث الكاميرا
      simulationCamera.position.set(0, 0, 50);
      simulationCamera.lookAt(0, 0, 0);
      
      showNotification('تم عرض محاكاة G-code ثلاثية الأبعاد');
    }

    // التحكم في المحاكاة
    function startSimulation() {
      isSimulationPlaying = true;
      document.getElementById('simulationStatus').textContent = 'جاري التشغيل';
    }

    function pauseSimulation() {
      isSimulationPlaying = false;
      document.getElementById('simulationStatus').textContent = 'متوقف';
    }

    function resetSimulation() {
      isSimulationPlaying = false;
      document.getElementById('simulationStatus').textContent = 'في انتظار التوليد';
      // إعادة تعيين المحاكاة
      updateSimulationPreview();
    }

    // تبديل الوضع الليلي
    const themeToggle = document.getElementById('themeToggle');
    themeToggle.addEventListener('click', () => {
      document.body.classList.toggle('dark');
      themeToggle.textContent = document.body.classList.contains('dark') ? '☀️' : '🌙';
    });

    // عرض الإشعارات
    function showNotification(message, isError = false) {
      notification.textContent = message;
      notification.className = 'notification';
      
      if (isError) {
        notification.classList.add('error');
      }
      
      notification.classList.add('show');
      
      setTimeout(() => {
        notification.classList.remove('show');
      }, 3000);
    }

    // تعيين خريطة الألوان
    function setColormap(map) {
      currentColormap = map;
      applyColormap();
    }

    // معالجة تحميل الملف
    fileInput.addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (!file) return;
      
      fileName.textContent = file.name;
      
      const reader = new FileReader();
      reader.onload = function(event) {
        const img = new Image();
        img.onload = function() {
          // ضبط أبعاد canvas2d
          const maxWidth = 800;
          const maxHeight = 600;
          let width = img.width;
          let height = img.height;
          
          if (width > maxWidth) {
            height = (maxWidth / width) * height;
            width = maxWidth;
          }
          
          if (height > maxHeight) {
            width = (maxHeight / height) * width;
            height = maxHeight;
          }
          
          canvas2d.width = width;
          canvas2d.height = height;
          
          // رسم الصورة على canvas2d
          ctx2d.drawImage(img, 0, 0, width, height);
          originalImageData = ctx2d.getImageData(0, 0, width, height);
          
          // توليد خريطة الارتفاعات
          generateHeightMap();
          
          // تحديث المعاينة ثلاثية الأبعاد
          update3DPreview();
          
          showNotification('تم تحميل الصورة بنجاح');
        };
        img.src = event.target.result;
      };
      reader.readAsDataURL(file);
    });

    // تحديث سرعة الدوران
    rotationSpeedInput.addEventListener('input', function() {
      rotationSpeed = parseFloat(this.value);
    });

    // تحديث عامل الارتفاع
    heightIntensity.addEventListener('input', function() {
      heightFactor = parseInt(this.value);
      update3DPreview();
    });

    // دورة التصيير
    function animate() {
      requestAnimationFrame(animate);
      
      if (mesh && rotationSpeed > 0) {
        mesh.rotation.y += rotationSpeed;
      }
      
      if (renderer) {
        renderer.render(scene, camera);
      }
      
      if (simulationRenderer) {
        simulationRenderer.render(simulationScene, simulationCamera);
      }
    }

    // إعادة ضبط الحجم عند تغيير حجم النافذة
    window.addEventListener('resize', function() {
      if (preview3d && renderer && camera) {
        camera.aspect = preview3d.offsetWidth / preview3d.offsetHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(preview3d.offsetWidth, preview3d.offsetHeight);
      }
      
      if (gcodeSimulation && simulationRenderer && simulationCamera) {
        simulationCamera.aspect = gcodeSimulation.offsetWidth / gcodeSimulation.offsetHeight;
        simulationCamera.updateProjectionMatrix();
        simulationRenderer.setSize(gcodeSimulation.offsetWidth, gcodeSimulation.offsetHeight);
      }
    });

    // التهيئة عند تحميل الصفحة
    window.addEventListener('load', function() {
      initThreeJS();
      animate();
      
      // إخفاء شاشات التحميل بعد فترة
      setTimeout(() => {
        if (loading3d) loading3d.style.display = 'none';
        if (loadingSimulation) loadingSimulation.style.display = 'none';
      }, 2000);
    });
  </script>
</body>
</html>
